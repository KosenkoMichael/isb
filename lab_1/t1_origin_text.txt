Возможно, кто-то скажет, что книга о коде отстала от времени — код сейчас уже
не так актуален; вместо него внимание следует направить на модели и требования. 
Нам даже доводилось слышать мнение, что код как таковой скоро перестанет существовать. 
Что скоро весь код будет генерироваться, а не писаться вручную. Что программисты станут попросту не нужны, потому что бизнесмены будут генерировать программы по спецификациям.
Ерунда! Код никогда не исчезнет, потому что код представляет подробности требований. На определенном уровне эти подробности невозможно игнорировать
или абстрагировать; их приходится определять. А когда требования определяются
настолько подробно, чтобы они могли быть выполнены компьютером, это и есть
программирование. А их определение есть код.
Вероятно, уровень абстракции наших языков продолжит расти. Я также ожидаю,
что количество предметно-ориентированных языков продолжит расти. И это
хорошо. Но код от этого существовать не перестанет. В самом деле, все определения, написанные на этих высокоуровневых, предметно-ориентированных
языках, станут кодом! И этот код должен быть достаточно компактным, точным,
формальным и подробным, чтобы компьютер мог понять и выполнить его.
Люди, полагающие, что код когда-нибудь исчезнет, напоминают математиков,
которые надеются когда-нибудь обнаружить неформальную математическую
дисциплину. Они надеются, что когда-нибудь будут построены машины, которые будут делать то, что мы хотим, а не то, что мы приказываем сделать. Такие
машины должны понимать нас настолько хорошо, чтобы преобразовать набор
нечетких потребностей в идеально выполняемые программы, точно отвечающие
этим потребностям.
Но этого никогда не произойдет. Даже люди, со всей их интуицией и изобретательностью, не способны создавать успешные системы на основе туманных
представлений своих клиентов. Если дисциплина определения требований
нас чему-то научила, так это тому, что четко определенные требования так же
формальны, как сам код, и могут использоваться как исполняемые тесты этого
кода!
В сущности, код представляет собой язык, на котором в конечном итоге выражаются потребности. Мы можем создавать языки, близкие к потребностям. Мы
можем создавать инструменты, помогающие нам обрабатывать и собирать эти
потребности в формальные структуры. Но необходимая точность никогда не
исчезнет — а следовательно, код останется всегда.